,cluster,keywords,avg_score,avg_comments,avg_word_count,avg_sentiment,avg_char_count,avg_readability,avg_sentence_count,avg_syllable_count,avg_smog_index,pct_has_url,pct_has_code,top_30%_post_count,middle_40%_post_count,bottom_30%_post_count,example_post,score_rank,comment_rank
3,5,"engineering, experience, years, role, engineer, thanks, everyone, projects, year, learn, software, advice, skills, appreciate, feel, engineers, career, getting, take, started, recently, course, analyst, bit, starting, hello, position, tech, ill, share, roles, background, curious, exam, helpful, science, worth, employees, else, previous, hoping, past, developer, senior, pay, general, offer, modeling, forward, honestly, plan, industry, growth, thought, solid, less, screening, dagster, least, yrs, research, taken, offered, whether, transition, supposed, perspective, lead, towards, growing, scientist, certification, stay, anymore, moved, java, leave, consulting, grow, feeling, switching, expect, spent, market, salary, higher, junior, term, weeks, coding, opportunity, transitioning, constantly, told, infra, family, basics, videos, head, swe, expertise, statistics, overall, dba, opinion, decent, accepted, program, strategy, planning, sections, financial, mention, sub",9.5,8.8,169.5,-0.653,1031.9,52.7,9.7,266.1,11.1,20.2,15.4,60,115,33,"Hi all!

I am reviewing for interviews and the following question come to mind.

If **surrogate keys** are supposed to be unique identifiers that don't have real world meaning AND if **primary keys** are supposed to reliably identify and distinguish between each individual record (which also don't have real world meaning), then why will someone use a surrogate key? Wouldn't using primary keys be the same? Is there any case in which surrogate keys are the way to go?

P.S: Both surrogate and primary keys are auto generated by DB. Right?

P.S.1: I understand that a surrogate key doesn't necessarily have to be the a primary key, so considering that both have no real meaning outside the DB, then I wonder what the purpose of surrogate keys are.

P.S.2: At work (in different projects), we mainly use natural keys for analytical workloads and primary keys for uniquely identifying a given row. So I am wondering on which kind of cases/projects these surrogate keys will fit. 

",1,1
1,1,"using, sql, azure, pipelines, database, pipeline, built, create, set, processing, storage, running, server, local, duckdb, power, handle, performance, support, memory, simple, queries, bigquery, complex, databases, via, key, users, glue, features, works, functions, directly, application, processes, catalog, setup, realtime, reports, lambda, connector, pandas, add, arrow, main, manage, gateway, efficient, tableau, function, including, transformation, integration, specifically, gcp, apis, connect, stream, dashboard, postgresql, workflows, capabilities, gizmosql, frontend, test, faster, automate, supports, transformations, easily, check, streaming, output, engine, initial, shared, serverless, document, embedded, perform, interactive, format, querying, visualization, syntax, builder, robust, dependencies, compute, dezoomcamp, connectors, powerful, queue, cloudbased, locally, instance, workflow, flask, apache, cli, library, notebooks, machine, libraries, provide, allows, sheets, studio, essentially, looker, airbnb, scale, extraction, sqlite, direct, popular, existing, host, readme, daton, sqlflow, bunch, environments, adopt, include, relevant, download, relying, proposed, frequently, tested, loads, effort, challenges, alternatives, larger, ipc, designing, graph, native, runtime, potential, cicd, analytical, mongodb, scalable, handling, central",9.4,7.8,156.9,-0.624,962.2,47.5,9.0,247.7,10.7,20.5,15.7,63,122,44,"[https://github.com/turbolytics/sql-flow](https://github.com/turbolytics/sql-flow)

**The goal of SQLFlow is to bring the simplicity of DuckDB to streaming data.**

SQLFlow is a high-performance stream processing engine that simplifies building data pipelines by enabling you to define them using just SQL. Think of SQLFLow as a lightweight, modern Flink.

SQLFlow models stream-processing as SQL queries using the [DuckDB SQL dialect](https://duckdb.org/docs/sql/introduction.html). Express your entire stream processing pipeline—ingestion, transformation, and enrichment—as a single SQL statement and configuration file.

Process [10's of thousands of events per second](https://sql-flow.com/docs/tutorials/clickhouse-sink) on a single machine with low memory overhead, using Python, DuckDB, Arrow and Confluent Python Client.

Tap into the DuckDB ecosystem of tools and libraries to build your stream processing applications. SQLFlow supports [parquet](https://sql-flow.com/docs/tutorials/s3-parquet-sink), csv, json and [iceberg](https://sql-flow.com/docs/tutorials/iceberg-sink). Read data from Kafka.",2,3
2,2,"work, ive, python, working, project, cloud, looking, aws, currently, well, etl, snowflake, tools, dbt, databricks, used, learning, anyone, love, airflow, solution, hey, right, resources, personal, platforms, worked, especially, pyspark, whats, specific, testing, going, focus, months, development, services, wanted, microsoft, far, governance, suggestions, folks, implement, next, try, fabric, great, mainly, improve, later, stack, hope, lake, cost, thoughts, knowledge, future, pretty, weve, recommend, docker, fully, linux, speed, recommendations, willing, remote, amazon, early, handson, seem, learned, easier, setting, step, making, mostly, stuff, airbyte, objectives, definitely, online, integrate, potentially, security, implemented, kafka, considered, client, repo, plus, basis, portfolio, practices, proper, technologies, redshift, couple, courses, rdataengineering, guidance, reason, languages, budget, fun, training, managed, uses, dialects, orchestration, developing, tips, obviously, task, github, three, sort, experienced, examples, allowed, involved, comfortable, majority, joined, athena, numpy, gain, endtoend, computer, gotten, familiar, unity, interest, gap, devops, onprem, sap, automated, xgboost, reasonable, terraform, offers, challenge, comes, exploring",8.5,7.2,153.1,-0.642,934.2,49.4,8.7,241.0,10.6,19.9,14.2,63,133,50,"[https://github.com/turbolytics/sql-flow](https://github.com/turbolytics/sql-flow)

**The goal of SQLFlow is to bring the simplicity of DuckDB to streaming data.**

SQLFlow is a high-performance stream processing engine that simplifies building data pipelines by enabling you to define them using just SQL. Think of SQLFLow as a lightweight, modern Flink.

SQLFlow models stream-processing as SQL queries using the [DuckDB SQL dialect](https://duckdb.org/docs/sql/introduction.html). Express your entire stream processing pipeline—ingestion, transformation, and enrichment—as a single SQL statement and configuration file.

Process [10's of thousands of events per second](https://sql-flow.com/docs/tutorials/clickhouse-sink) on a single machine with low memory overhead, using Python, DuckDB, Arrow and Confluent Python Client.

Tap into the DuckDB ecosystem of tools and libraries to build your stream processing applications. SQLFlow supports [parquet](https://sql-flow.com/docs/tutorials/s3-parquet-sink), csv, json and [iceberg](https://sql-flow.com/docs/tutorials/iceberg-sink). Read data from Kafka.",3,5
5,0,"need, table, event, source, without, instead, every, replay, day, example, single, change, per, business, daily, based, keys, manually, model, keep, needs, events, doesnt, name, list, option, user, must, takes, history, often, truth, full, column, hour, address, requirements, date, reading, track, whenever, metrics, result, update, feature, primary, columns, meaning, pricing, structure, details, rows, simply, available, dedicated, country, means, facebook, error, missing, evolve, involves, names, size, domain, place, addresses, timestamp, parse, mean, slow, schemas, heres, return, dimensions, delete, state, times, arent, ground, errors, receive, min, added, geocoding, shape, sourcing, wasnt, insert, minutes, value, flow, save, normal, little, region, usually, bad, becomes, failure, replication, entirely, products, infrastructure, minute, person, average, servers, internet, looked, probably, campaigns, workloads, looks",8.2,7.4,175.5,-0.663,1069.0,47.9,9.8,275.5,11.4,22.2,15.5,52,108,34,"[https://github.com/turbolytics/sql-flow](https://github.com/turbolytics/sql-flow)

**The goal of SQLFlow is to bring the simplicity of DuckDB to streaming data.**

SQLFlow is a high-performance stream processing engine that simplifies building data pipelines by enabling you to define them using just SQL. Think of SQLFLow as a lightweight, modern Flink.

SQLFlow models stream-processing as SQL queries using the [DuckDB SQL dialect](https://duckdb.org/docs/sql/introduction.html). Express your entire stream processing pipeline—ingestion, transformation, and enrichment—as a single SQL statement and configuration file.

Process [10's of thousands of events per second](https://sql-flow.com/docs/tutorials/clickhouse-sink) on a single machine with low memory overhead, using Python, DuckDB, Arrow and Confluent Python Client.

Tap into the DuckDB ecosystem of tools and libraries to build your stream processing applications. SQLFlow supports [parquet](https://sql-flow.com/docs/tutorials/s3-parquet-sink), csv, json and [iceberg](https://sql-flow.com/docs/tutorials/iceberg-sink). Read data from Kafka.",4,4
6,6,"new, dont, know, job, time, company, even, help, much, really, best, could, current, seems, people, still, since, question, given, sure, first, big, hear, say, found, kind, questions, possible, free, tried, thank, companies, anything, end, cant, everything, wondering, post, understand, ago, give, practice, part, someone, back, hard, field, theres, please, never, advance, got, technical, real, isnt, made, move, last, type, path, maybe, ask, version, community, didnt, guys, may, surrogate, small, already, appreciated, together, level, department, stuck, came, world, though, enough, various, always, days, makes, month, thing, mind, look, edit, information, said, context, become, old, input, break, wrong, clear, finance, hours, book, needed, considering, fear, spend, long, complete, actual, scratch, feels, answer, today, yes, rate, fast, noticed, regarding, hand, switch, matter, becoming, pros, interesting, says, finally, seen, kimball, asking, technology, situation, cannot, wants, taking, blah, exactly, reasons, wonder, title, encounter, outside, away, explore, startup, stats, interviews, lets, live, number, numbers, fine, risk, somewhere, strong, covered, analysts, sometimes, decide, deep, guy, rejected, consider, generally, city, ideally, tell, scope, macbooks, positions, personally, tend, documentation, finding, decisions, put, demand, took, contract, consistent, stable, links, lack",8.1,7.9,149.8,-0.638,910.6,50.2,8.6,235.0,10.3,18.8,13.7,67,135,54,"I've built an interactive demo for CDC to help explain how it works.

The app currently shows the transaction log-based and query-based CDC approaches.

Change Data Capture (CDC) is a design pattern that tracks changes (inserts, updates, deletes) in a database and makes those changes available to downstream systems in real-time or near real-time.

CDC is super useful for a variety of use cases:

\- Real-time data replication between operational databases and data warehouses or lakehouses

\- Keeping analytics systems up to date without full batch reloads

\- Synchronizing data across microservices or distributed systems

\- Feeding event-driven architectures by turning database changes into event streams

\- Maintaining materialized views or derived tables with fresh data

\- Simplifying ETL/ELT pipelines by processing only changed records

And many more!

Let me know what you think and if there's any functionality missing that could be interesting to showcase.",5,2
0,3,"data, use, would, like, get, want, also, way, etc, make, better, something, different, one, things, lot, see, team, trying, build, building, think, architecture, tool, spark, might, process, run, approach, good, find, able, around, start, thats, analytics, youre, system, done, similar, insights, two, feedback, solutions, many, multiple, open, easy, another, issue, quite, jobs, however, code, actually, warehouse, tasks, problem, access, management, teams, clickhouse, useful, dashboards, within, moving, iceberg, common, creating, others, costs, related, tests, come, production, high, fit, sense, drop, super, options, prefer, helps, opensource, clean, results, along, necessary, following, thinking, several, basically, gets, link, internal, point, second, pain, basic, let, base, whole, report, due, books, points, asked, quality, week, fivetran, limited, rather, apply, struggle, smaller, side, expensive, call, certain, entire, goal, theyre, install, important, understanding, match, service, website, top, figure, interested, ways, saas, writing, hit, painful, significant, written, pass, struggling, historic, wed, require, wont, oracle, blog, half, youve, marketing, seeing, purpose, ingest, stage, low, entry, party, adf, managing, required, ingesting, perhaps, windows, analyze, concepts, warehouses, stat, ecommerce, fix, designed, normally, regularly, video, businesses, rest, quickly, sharing, cons, present, email, topic, discussions, ever, obvious, ready, benchmark, visual, standard",8.0,7.2,144.7,-0.636,885.0,43.9,8.3,228.1,10.1,20.7,13.7,68,144,59,"[https://github.com/turbolytics/sql-flow](https://github.com/turbolytics/sql-flow)

**The goal of SQLFlow is to bring the simplicity of DuckDB to streaming data.**

SQLFlow is a high-performance stream processing engine that simplifies building data pipelines by enabling you to define them using just SQL. Think of SQLFLow as a lightweight, modern Flink.

SQLFlow models stream-processing as SQL queries using the [DuckDB SQL dialect](https://duckdb.org/docs/sql/introduction.html). Express your entire stream processing pipeline—ingestion, transformation, and enrichment—as a single SQL statement and configuration file.

Process [10's of thousands of events per second](https://sql-flow.com/docs/tutorials/clickhouse-sink) on a single machine with low memory overhead, using Python, DuckDB, Arrow and Confluent Python Client.

Tap into the DuckDB ecosystem of tools and libraries to build your stream processing applications. SQLFlow supports [parquet](https://sql-flow.com/docs/tutorials/s3-parquet-sink), csv, json and [iceberg](https://sql-flow.com/docs/tutorials/iceberg-sink). Read data from Kafka.",6,5
4,4,"files, api, tables, query, models, read, google, json, file, logic, write, case, csv, store, datasets, across, sources, metadata, created, schema, systems, large, platform, custom, script, changes, dataset, row, reporting, parquet, issues, ads, load, fields, analysis, cases, product, values, design, view, idea, layer, search, import, suggest, language, excel, app, blob, form, request, params, postgres, ingestion, raw, mysql, fact, processed, structures, either, separate, structured, connection, core, method, downstream, scripts, extract, maintain, send, hub, records, transactional, overhead, lineage, environment, object, external, pull, iot, order, typically, grid, hubs, validation, requires, mapping, batch, mechanism, location, updates, keeping, checkout, operations, runs, convert, optimized, avoid, matching, views, formats, matters, vpc, bring, reduce, migrate, consists, starts, reads, refresh, relationships, bronze, historical, tracking, developers, natural",8.0,7.1,169.4,-0.679,1041.7,44.5,9.5,267.7,10.7,24.1,17.9,49,102,44,"[https://github.com/turbolytics/sql-flow](https://github.com/turbolytics/sql-flow)

**The goal of SQLFlow is to bring the simplicity of DuckDB to streaming data.**

SQLFlow is a high-performance stream processing engine that simplifies building data pipelines by enabling you to define them using just SQL. Think of SQLFLow as a lightweight, modern Flink.

SQLFlow models stream-processing as SQL queries using the [DuckDB SQL dialect](https://duckdb.org/docs/sql/introduction.html). Express your entire stream processing pipeline—ingestion, transformation, and enrichment—as a single SQL statement and configuration file.

Process [10's of thousands of events per second](https://sql-flow.com/docs/tutorials/clickhouse-sink) on a single machine with low memory overhead, using Python, DuckDB, Arrow and Confluent Python Client.

Tap into the DuckDB ecosystem of tools and libraries to build your stream processing applications. SQLFlow supports [parquet](https://sql-flow.com/docs/tutorials/s3-parquet-sink), csv, json and [iceberg](https://sql-flow.com/docs/tutorials/iceberg-sink). Read data from Kafka.",6,7
